// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String?
  password     String         // Campo para almacenar la contraseña hasheada
  createdAt    DateTime       @default(now())
  pushToken    String?        // Para notificaciones push (en el futuro)
  donations    Float?         // Cuánto ha donado el usuario
  isDonor      Boolean        @default(false)
  skinsLimit   Int            @default(1)
  role         Role           @default(user)
  trackedItems TrackedItem[]
  verificationCode String?  // Código de verificación enviado por correo
  verificationExpires DateTime? // Fecha de expiración del código de verificación
  isVerified       Boolean  @default(false) // Si el usuario ha verificado su correo
}

model TrackedItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  skinId    String   // ID de la skin en la tienda de Fortnite
  obtained  Boolean  @default(false)  // 👈 Este es el nuevo campo
  addedAt   DateTime @default(now())

  @@unique([userId, skinId]) // evita duplicados por usuario + skin
}
